/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode pre = new ListNode();
        ListNode cur = pre;
        Queue<ListNode> queue = new PriorityQueue<>((v1, v2) -> v1.val - v2.val);    //这里注意queue的赋值，和排列规则如何实现
        for(int i = 0;i<lists.length;i++){
            if(lists[i] != null){
                queue.offer(lists[i]);                          //先把所有list的第一个node放进去
            }
            
        }
        while(queue.size() != 0){                               //一直遍历，把top的node拿出来比较，并且把之后的node再添加进去
            ListNode out = queue.poll();
            cur.next = out;
            cur = cur.next;
            if(out.next != null){
                queue.offer(out.next);
            }
        }
        return pre.next;
         

    }
}
