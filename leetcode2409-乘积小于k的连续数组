//解题思路就是动态窗口，在不大于等于k的时候持续×，每次×新增加的数都是j-i+1
/**
     * 思路: 设存在数组nums=[A, B, C, D], k为乘积, count为符合条件的数组个数, i,j为窗口左右边界;
     *(假设) A: A<k    i=j=0  --> count = A (0-0+1)
     *      B: AB<k   j=1    --> count = AB, B(1-0+1)
     *      C: ABC>=k j=2    --> BC<k i=1 --> count = BC, C (2-1+1)
     *      D: BCD>k  j=3    --> CD>K i=2 --> D < k i=3 --> count = D (3-3+1)
     *      当计算的数组乘积大于k时，将窗口左边界右移, 直到小于k, 计算count，窗口右边界右移；
     *      当计算的数组乘积小于k时，计算count，窗口右边界右移
     *      得出规律：每一次遍历count增加了j-i+1
     */


class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int i=0;
        int j =i;
        int cur = 1;
        int result = 0;
        while(j < nums.length){
            cur*= nums[j];                 //为了统筹我们先乘再统一判断
            while(i<=j && cur >= k){            //如果大了，就一直除
                cur /= nums[i];
                i++;
            }
            if(i<=j){                     //符合要求就加上这些值
                result += (j-i+1);
              
            }
            j++;                          //记得while的递增条件
           
        }
        return result;

    }
}
