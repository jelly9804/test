//以下是一个listnode 的class

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    //先创造一个pre，这个pre的next指针就是我们需要返回的结果的初始node，在链表一类问题的解答里面，一般都需要创建一个固定的node来作为最终返回的结果。
        ListNode pre = new ListNode(0);
        
    //创建一个node指向这个pre，cur就是当前的node，这个当前意味着cur可以实时改变
        ListNode cur = pre;
    //初始定义carry 和 sum 的值
        int carry = 0;
        int sum = 0;
        
        
        //进入循环，如题目描述，这个问题可以看作是两个链表从第一位开始同位相加，并且把carry放入下一位继续相加，最后谁先结束就把剩余补0，直到两个链表都结束。
        while(l1 != null || l2 != null){
        
        
        //这里注意 我们要判断的是l1 和l1 是否为 null，而不是l1.value 和l2.value 是否为null，因为一个node如果已经为null，那么node.value会报错。
            int num1 = l1 == null ? 0 : l1.val;
            int num2 = l2 == null ? 0 : l2.val;

            sum = num1 + num2 + carry;

            carry = sum / 10;
            sum = sum % 10;

        //做完+操作之后，我们新建一个node作为这次同位之间相加的结果，然后让cur的next指向它。
            cur.next = new ListNode(sum);
            
        //再让cur指向下一个结果。
            cur = cur.next;


        //这里因为要进行下一个同位相加，我们也要判断下l1 和 l2 是接着下一个node 还是变成 null
            l1 = l1 == null ? null : l1.next;
            l2 = l2 == null ? null : l2.next;
            
        }
        
        //最后如果还有进位，需要再创建一个node放这个值。
        if (carry != 0){
            cur.next = new ListNode(carry);
        }
        
        //最后返回最初创建的pre的下一个值就好了。
        return pre.next;

    }
}
