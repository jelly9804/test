//以下是一个listnode 的class

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    //先创造一个pre，这个pre的next指针就是我们需要返回的结果的初始node，在链表一类问题的解答里面，一般都需要创建一个固定的node来作为最终返回的结果。
        ListNode pre = new ListNode(0);
        
    //创建一个node指向这个pre，cur就是当前的node，这个当前意味着cur可以实时改变
        ListNode cur = pre;
    //初始定义carry 和 sum 的值
        int carry = 0;
        int sum = 0;
        
        
        //进入循环
        while(l1 != null || l2 != null){
            int num1 = l1 == null ? 0 : l1.val;
            int num2 = l2 == null ? 0 : l2.val;

            sum = num1 + num2 + carry;

            carry = sum / 10;
            sum = sum % 10;

            cur.next = new ListNode(sum);
            cur = cur.next;

            l1 = l1 == null ? null : l1.next;
            l2 = l2 == null ? null : l2.next;
            
        }
        if (carry != 0){
            cur.next = new ListNode(carry);
        }
        return pre.next;

    }
}
