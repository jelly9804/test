class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int len = matrix.length;
        for(int i = 1;i<len;i++){
            for(int j = 0;j<len;j++){                                              //遍历从第二行开始的每一个数
                int min = 0;
                if(j == 0){                                                         //如果是第一列，那只考虑直上的那个数或者右上角
                    min = Math.min(matrix[i-1][j],matrix[i-1][j+1]);
                    }
                else if(j == len-1){min = Math.min(matrix[i-1][j],matrix[i-1][j-1]);}           //如果是最后一列，那么考虑直上或者左上角
                else{
                    min = Math.min(Math.min(matrix[i-1][j-1],matrix[i-1][j+1]),matrix[i-1][j]);     //其他情况做三种考虑
                }

                matrix[i][j] += min;                                          //每次遍历的都加上min，那么最后的结果就是最后一行的
            }
            

        }
        int min = matrix[len-1][0];
        for(int i=0;i<len;i++){
            if(matrix[len-1][i] < min){
                min = matrix[len-1][i];                                 //选出最后一行的最小值
            }
        }
        return min;

    }
}
